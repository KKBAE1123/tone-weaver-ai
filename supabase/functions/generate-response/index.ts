
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");
const OPENAI_BASE_URL = Deno.env.get("OPENAI_BASE_URL") || "https://api.openai.com/v1";
const OPENAI_MODEL = Deno.env.get("OPENAI_MODEL") || "gpt-4o";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, tone, relationship, scenario } = await req.json();
    
    // Basic validation
    if (!message || !tone) {
      return new Response(
        JSON.stringify({ error: "Message and tone are required" }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 400 }
      );
    }
    
    // Construct system prompt based on user's selections
    let systemPrompt = `You are a communication assistant that helps craft messages in a "${tone}" tone.`;
    
    if (relationship) {
      systemPrompt += ` The message is for someone who is a ${relationship} to the user.`;
    }
    
    if (scenario) {
      systemPrompt += ` The specific scenario is: ${scenario}.`;
    }
    
    systemPrompt += " Provide a thoughtful, appropriate response that matches the requested tone and context.";
    
    // Call OpenAI API
    const openAIResponse = await fetch(`${OPENAI_BASE_URL}/chat/completions`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: OPENAI_MODEL,
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ],
        temperature: 0.7,
        max_tokens: 500,
      }),
    });
    
    if (!openAIResponse.ok) {
      const errorData = await openAIResponse.json();
      console.error("OpenAI API error:", errorData);
      throw new Error(`OpenAI API error: ${errorData.error?.message || "Unknown error"}`);
    }
    
    const data = await openAIResponse.json();
    const generatedContent = data.choices[0]?.message?.content;
    
    if (!generatedContent) {
      throw new Error("No content generated by OpenAI");
    }
    
    // Return the generated content
    return new Response(
      JSON.stringify({ content: generatedContent }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Error in generate-response function:", error);
    return new Response(
      JSON.stringify({ error: error.message || "An error occurred" }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 500 }
    );
  }
});
